(()=>{var te=Object.defineProperty;var A=(i,e)=>()=>(i&&(e=i(i=0)),e);var J=(i,e)=>{for(var t in e)te(i,t,{get:e[t],enumerable:!0})};var D,I,re,ne,se,K,M,C,G,H,N,pe,ae,ie,oe,le,W,ye,z=A(()=>{(function(i){i.Unimplemented="UNIMPLEMENTED",i.Unavailable="UNAVAILABLE"})(D||(D={}));I=class extends Error{constructor(e,t,r){super(e),this.message=e,this.code=t,this.data=r}},re=i=>{var e,t;return i!=null&&i.androidBridge?"android":!((t=(e=i==null?void 0:i.webkit)===null||e===void 0?void 0:e.messageHandlers)===null||t===void 0)&&t.bridge?"ios":"web"},ne=i=>{let e=i.CapacitorCustomPlatform||null,t=i.Capacitor||{},r=t.Plugins=t.Plugins||{},n=()=>e!==null?e.name:re(i),s=()=>n()!=="web",o=d=>{let c=w.get(d);return!!(c!=null&&c.platforms.has(n())||l(d))},l=d=>{var c;return(c=t.PluginHeaders)===null||c===void 0?void 0:c.find(b=>b.name===d)},h=d=>i.console.error(d),w=new Map,a=(d,c={})=>{let b=w.get(d);if(b)return console.warn(`Capacitor plugin "${d}" already registered. Cannot register plugins twice.`),b.proxy;let g=n(),f=l(d),y,u=async()=>(!y&&g in c?y=typeof c[g]=="function"?y=await c[g]():y=c[g]:e!==null&&!y&&"web"in c&&(y=typeof c.web=="function"?y=await c.web():y=c.web),y),m=(S,k)=>{var T,L;if(f){let x=f==null?void 0:f.methods.find(q=>k===q.name);if(x)return x.rtype==="promise"?q=>t.nativePromise(d,k.toString(),q):(q,R)=>t.nativeCallback(d,k.toString(),q,R);if(S)return(T=S[k])===null||T===void 0?void 0:T.bind(S)}else{if(S)return(L=S[k])===null||L===void 0?void 0:L.bind(S);throw new I(`"${d}" plugin is not implemented on ${g}`,D.Unimplemented)}},p=S=>{let k,T=(...L)=>{let x=u().then(q=>{let R=m(q,S);if(R){let $=R(...L);return k=$==null?void 0:$.remove,$}else throw new I(`"${d}.${S}()" is not implemented on ${g}`,D.Unimplemented)});return S==="addListener"&&(x.remove=async()=>k()),x};return T.toString=()=>`${S.toString()}() { [capacitor code] }`,Object.defineProperty(T,"name",{value:S,writable:!1,configurable:!1}),T},v=p("addListener"),E=p("removeListener"),P=(S,k)=>{let T=v({eventName:S},k),L=async()=>{let q=await T;E({eventName:S,callbackId:q},k)},x=new Promise(q=>T.then(()=>q({remove:L})));return x.remove=async()=>{console.warn("Using addListener() without 'await' is deprecated."),await L()},x},F=new Proxy({},{get(S,k){switch(k){case"$$typeof":return;case"toJSON":return()=>({});case"addListener":return f?P:v;case"removeListener":return E;default:return p(k)}}});return r[d]=F,w.set(d,{name:d,proxy:F,platforms:new Set([...Object.keys(c),...f?[g]:[]])}),F};return t.convertFileSrc||(t.convertFileSrc=d=>d),t.getPlatform=n,t.handleError=h,t.isNativePlatform=s,t.isPluginAvailable=o,t.registerPlugin=a,t.Exception=I,t.DEBUG=!!t.DEBUG,t.isLoggingEnabled=!!t.isLoggingEnabled,t},se=i=>i.Capacitor=ne(i),K=se(typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{}),M=K.registerPlugin,C=class{constructor(){this.listeners={},this.retainedEventArguments={},this.windowListeners={}}addListener(e,t){let r=!1;this.listeners[e]||(this.listeners[e]=[],r=!0),this.listeners[e].push(t);let s=this.windowListeners[e];s&&!s.registered&&this.addWindowListener(s),r&&this.sendRetainedArgumentsForEvent(e);let o=async()=>this.removeListener(e,t);return Promise.resolve({remove:o})}async removeAllListeners(){this.listeners={};for(let e in this.windowListeners)this.removeWindowListener(this.windowListeners[e]);this.windowListeners={}}notifyListeners(e,t,r){let n=this.listeners[e];if(!n){if(r){let s=this.retainedEventArguments[e];s||(s=[]),s.push(t),this.retainedEventArguments[e]=s}return}n.forEach(s=>s(t))}hasListeners(e){return!!this.listeners[e].length}registerWindowListener(e,t){this.windowListeners[t]={registered:!1,windowEventName:e,pluginEventName:t,handler:r=>{this.notifyListeners(t,r)}}}unimplemented(e="not implemented"){return new K.Exception(e,D.Unimplemented)}unavailable(e="not available"){return new K.Exception(e,D.Unavailable)}async removeListener(e,t){let r=this.listeners[e];if(!r)return;let n=r.indexOf(t);this.listeners[e].splice(n,1),this.listeners[e].length||this.removeWindowListener(this.windowListeners[e])}addWindowListener(e){window.addEventListener(e.windowEventName,e.handler),e.registered=!0}removeWindowListener(e){e&&(window.removeEventListener(e.windowEventName,e.handler),e.registered=!1)}sendRetainedArgumentsForEvent(e){let t=this.retainedEventArguments[e];t&&(delete this.retainedEventArguments[e],t.forEach(r=>{this.notifyListeners(e,r)}))}},G=i=>encodeURIComponent(i).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape),H=i=>i.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent),N=class extends C{async getCookies(){let e=document.cookie,t={};return e.split(";").forEach(r=>{if(r.length<=0)return;let[n,s]=r.replace(/=/,"CAP_COOKIE").split("CAP_COOKIE");n=H(n).trim(),s=H(s).trim(),t[n]=s}),t}async setCookie(e){try{let t=G(e.key),r=G(e.value),n=`; expires=${(e.expires||"").replace("expires=","")}`,s=(e.path||"/").replace("path=",""),o=e.url!=null&&e.url.length>0?`domain=${e.url}`:"";document.cookie=`${t}=${r||""}${n}; path=${s}; ${o};`}catch(t){return Promise.reject(t)}}async deleteCookie(e){try{document.cookie=`${e.key}=; Max-Age=0`}catch(t){return Promise.reject(t)}}async clearCookies(){try{let e=document.cookie.split(";")||[];for(let t of e)document.cookie=t.replace(/^ +/,"").replace(/=.*/,`=;expires=${new Date().toUTCString()};path=/`)}catch(e){return Promise.reject(e)}}async clearAllCookies(){try{await this.clearCookies()}catch(e){return Promise.reject(e)}}},pe=M("CapacitorCookies",{web:()=>new N}),ae=async i=>new Promise((e,t)=>{let r=new FileReader;r.onload=()=>{let n=r.result;e(n.indexOf(",")>=0?n.split(",")[1]:n)},r.onerror=n=>t(n),r.readAsDataURL(i)}),ie=(i={})=>{let e=Object.keys(i);return Object.keys(i).map(n=>n.toLocaleLowerCase()).reduce((n,s,o)=>(n[s]=i[e[o]],n),{})},oe=(i,e=!0)=>i?Object.entries(i).reduce((r,n)=>{let[s,o]=n,l,h;return Array.isArray(o)?(h="",o.forEach(w=>{l=e?encodeURIComponent(w):w,h+=`${s}=${l}&`}),h.slice(0,-1)):(l=e?encodeURIComponent(o):o,h=`${s}=${l}`),`${r}&${h}`},"").substr(1):null,le=(i,e={})=>{let t=Object.assign({method:i.method||"GET",headers:i.headers},e),n=ie(i.headers)["content-type"]||"";if(typeof i.data=="string")t.body=i.data;else if(n.includes("application/x-www-form-urlencoded")){let s=new URLSearchParams;for(let[o,l]of Object.entries(i.data||{}))s.set(o,l);t.body=s.toString()}else if(n.includes("multipart/form-data")||i.data instanceof FormData){let s=new FormData;if(i.data instanceof FormData)i.data.forEach((l,h)=>{s.append(h,l)});else for(let l of Object.keys(i.data))s.append(l,i.data[l]);t.body=s;let o=new Headers(t.headers);o.delete("content-type"),t.headers=o}else(n.includes("application/json")||typeof i.data=="object")&&(t.body=JSON.stringify(i.data));return t},W=class extends C{async request(e){let t=le(e,e.webFetchExtra),r=oe(e.params,e.shouldEncodeUrlParams),n=r?`${e.url}?${r}`:e.url,s=await fetch(n,t),o=s.headers.get("content-type")||"",{responseType:l="text"}=s.ok?e:{};o.includes("application/json")&&(l="json");let h,w;switch(l){case"arraybuffer":case"blob":w=await s.blob(),h=await ae(w);break;case"json":h=await s.json();break;case"document":case"text":default:h=await s.text()}let a={};return s.headers.forEach((d,c)=>{a[c]=d}),{data:h,headers:a,status:s.status,url:s.url}}async get(e){return this.request(Object.assign(Object.assign({},e),{method:"GET"}))}async post(e){return this.request(Object.assign(Object.assign({},e),{method:"POST"}))}async put(e){return this.request(Object.assign(Object.assign({},e),{method:"PUT"}))}async patch(e){return this.request(Object.assign(Object.assign({},e),{method:"PATCH"}))}async delete(e){return this.request(Object.assign(Object.assign({},e),{method:"DELETE"}))}},ye=M("CapacitorHttp",{web:()=>new W})});var O,B,U=A(()=>{O=class{constructor(e){this.sqlite=e,this._connectionDict=new Map}async initWebStore(){try{return await this.sqlite.initWebStore(),Promise.resolve()}catch(e){return Promise.reject(e)}}async saveToStore(e){try{return await this.sqlite.saveToStore({database:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async saveToLocalDisk(e){try{return await this.sqlite.saveToLocalDisk({database:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async getFromLocalDiskToStore(e){let t=e!=null?e:!0;try{return await this.sqlite.getFromLocalDiskToStore({overwrite:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async echo(e){try{let t=await this.sqlite.echo({value:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isSecretStored(){try{let e=await this.sqlite.isSecretStored();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async setEncryptionSecret(e){try{return await this.sqlite.setEncryptionSecret({passphrase:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async changeEncryptionSecret(e,t){try{return await this.sqlite.changeEncryptionSecret({passphrase:e,oldpassphrase:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async clearEncryptionSecret(){try{return await this.sqlite.clearEncryptionSecret(),Promise.resolve()}catch(e){return Promise.reject(e)}}async checkEncryptionSecret(e){try{let t=await this.sqlite.checkEncryptionSecret({passphrase:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async addUpgradeStatement(e,t){try{return e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.addUpgradeStatement({database:e,upgrade:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async createConnection(e,t,r,n,s){try{e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.createConnection({database:e,encrypted:t,mode:r,version:n,readonly:s});let o=new B(e,s,this.sqlite),l=s?`RO_${e}`:`RW_${e}`;return this._connectionDict.set(l,o),Promise.resolve(o)}catch(o){return Promise.reject(o)}}async closeConnection(e,t){try{e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.closeConnection({database:e,readonly:t});let r=t?`RO_${e}`:`RW_${e}`;return this._connectionDict.delete(r),Promise.resolve()}catch(r){return Promise.reject(r)}}async isConnection(e,t){let r={};e.endsWith(".db")&&(e=e.slice(0,-3));let n=t?`RO_${e}`:`RW_${e}`;return r.result=this._connectionDict.has(n),Promise.resolve(r)}async retrieveConnection(e,t){e.endsWith(".db")&&(e=e.slice(0,-3));let r=t?`RO_${e}`:`RW_${e}`;if(this._connectionDict.has(r)){let n=this._connectionDict.get(r);return typeof n!="undefined"?Promise.resolve(n):Promise.reject(`Connection ${e} is undefined`)}else return Promise.reject(`Connection ${e} does not exist`)}async getNCDatabasePath(e,t){try{let r=await this.sqlite.getNCDatabasePath({path:e,database:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}}async createNCConnection(e,t){try{await this.sqlite.createNCConnection({databasePath:e,version:t});let r=new B(e,!0,this.sqlite),n=`RO_${e})`;return this._connectionDict.set(n,r),Promise.resolve(r)}catch(r){return Promise.reject(r)}}async closeNCConnection(e){try{await this.sqlite.closeNCConnection({databasePath:e});let t=`RO_${e})`;return this._connectionDict.delete(t),Promise.resolve()}catch(t){return Promise.reject(t)}}async isNCConnection(e){let t={},r=`RO_${e})`;return t.result=this._connectionDict.has(r),Promise.resolve(t)}async retrieveNCConnection(e){if(this._connectionDict.has(e)){let t=`RO_${e})`,r=this._connectionDict.get(t);return typeof r!="undefined"?Promise.resolve(r):Promise.reject(`Connection ${e} is undefined`)}else return Promise.reject(`Connection ${e} does not exist`)}async isNCDatabase(e){try{let t=await this.sqlite.isNCDatabase({databasePath:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async retrieveAllConnections(){return this._connectionDict}async closeAllConnections(){let e=new Map;try{for(let t of this._connectionDict.keys()){let r=t.substring(3),n=t.substring(0,3)==="RO_";await this.sqlite.closeConnection({database:r,readonly:n}),e.set(t,null)}for(let t of e.keys())this._connectionDict.delete(t);return Promise.resolve()}catch(t){return Promise.reject(t)}}async checkConnectionsConsistency(){try{let e=[...this._connectionDict.keys()],t=[],r=[];for(let s of e)t.push(s.substring(0,2)),r.push(s.substring(3));let n=await this.sqlite.checkConnectionsConsistency({dbNames:r,openModes:t});return n.result||(this._connectionDict=new Map),Promise.resolve(n)}catch(e){return this._connectionDict=new Map,Promise.reject(e)}}async importFromJson(e){try{let t=await this.sqlite.importFromJson({jsonstring:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isJsonValid(e){try{let t=await this.sqlite.isJsonValid({jsonstring:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async copyFromAssets(e){let t=e!=null?e:!0;try{return await this.sqlite.copyFromAssets({overwrite:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async getFromHTTPRequest(e,t){let r=t!=null?t:!0;try{return await this.sqlite.getFromHTTPRequest({url:e,overwrite:r}),Promise.resolve()}catch(n){return Promise.reject(n)}}async isDatabaseEncrypted(e){e.endsWith(".db")&&(e=e.slice(0,-3));try{let t=await this.sqlite.isDatabaseEncrypted({database:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isInConfigEncryption(){try{let e=await this.sqlite.isInConfigEncryption();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isInConfigBiometricAuth(){try{let e=await this.sqlite.isInConfigBiometricAuth();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isDatabase(e){e.endsWith(".db")&&(e=e.slice(0,-3));try{let t=await this.sqlite.isDatabase({database:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async getDatabaseList(){try{let t=(await this.sqlite.getDatabaseList()).values;t.sort();let r={values:t};return Promise.resolve(r)}catch(e){return Promise.reject(e)}}async getMigratableDbList(e){let t=e||"default";try{let r=await this.sqlite.getMigratableDbList({folderPath:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}}async addSQLiteSuffix(e,t){let r=e||"default",n=t||[];try{let s=await this.sqlite.addSQLiteSuffix({folderPath:r,dbNameList:n});return Promise.resolve(s)}catch(s){return Promise.reject(s)}}async deleteOldDatabases(e,t){let r=e||"default",n=t||[];try{let s=await this.sqlite.deleteOldDatabases({folderPath:r,dbNameList:n});return Promise.resolve(s)}catch(s){return Promise.reject(s)}}async moveDatabasesAndAddSuffix(e,t){let r=e||"default",n=t||[];return this.sqlite.moveDatabasesAndAddSuffix({folderPath:r,dbNameList:n})}},B=class{constructor(e,t,r){this.dbName=e,this.readonly=t,this.sqlite=r}getConnectionDBName(){return this.dbName}getConnectionReadOnly(){return this.readonly}async open(){try{return await this.sqlite.open({database:this.dbName,readonly:this.readonly}),Promise.resolve()}catch(e){return Promise.reject(e)}}async close(){try{return await this.sqlite.close({database:this.dbName,readonly:this.readonly}),Promise.resolve()}catch(e){return Promise.reject(e)}}async beginTransaction(){try{let e=await this.sqlite.beginTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async commitTransaction(){try{let e=await this.sqlite.commitTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async rollbackTransaction(){try{let e=await this.sqlite.rollbackTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isTransactionActive(){try{let e=await this.sqlite.isTransactionActive({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async loadExtension(e){try{return await this.sqlite.loadExtension({database:this.dbName,path:e,readonly:this.readonly}),Promise.resolve()}catch(t){return Promise.reject(t)}}async enableLoadExtension(e){try{return await this.sqlite.enableLoadExtension({database:this.dbName,toggle:e,readonly:this.readonly}),Promise.resolve()}catch(t){return Promise.reject(t)}}async getUrl(){try{let e=await this.sqlite.getUrl({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async getVersion(){try{let e=await this.sqlite.getVersion({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async getTableList(){try{let e=await this.sqlite.getTableList({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async execute(e,t=!0,r=!0){try{if(this.readonly)return Promise.reject("not allowed in read-only mode");{let n=await this.sqlite.execute({database:this.dbName,statements:e,transaction:t,readonly:!1,isSQL92:r});return Promise.resolve(n)}}catch(n){return Promise.reject(n)}}async query(e,t,r=!0){let n;try{return t&&t.length>0?n=await this.sqlite.query({database:this.dbName,statement:e,values:t,readonly:this.readonly,isSQL92:!0}):n=await this.sqlite.query({database:this.dbName,statement:e,values:[],readonly:this.readonly,isSQL92:r}),n=await this.reorderRows(n),Promise.resolve(n)}catch(s){return Promise.reject(s)}}async run(e,t,r=!0,n="no",s=!0){let o;try{return this.readonly?Promise.reject("not allowed in read-only mode"):(t&&t.length>0?o=await this.sqlite.run({database:this.dbName,statement:e,values:t,transaction:r,readonly:!1,returnMode:n,isSQL92:!0}):o=await this.sqlite.run({database:this.dbName,statement:e,values:[],transaction:r,readonly:!1,returnMode:n,isSQL92:s}),o.changes=await this.reorderRows(o.changes),Promise.resolve(o))}catch(l){return Promise.reject(l)}}async executeSet(e,t=!0,r="no",n=!0){let s;try{return this.readonly?Promise.reject("not allowed in read-only mode"):(s=await this.sqlite.executeSet({database:this.dbName,set:e,transaction:t,readonly:!1,returnMode:r,isSQL92:n}),s.changes=await this.reorderRows(s.changes),Promise.resolve(s))}catch(o){return Promise.reject(o)}}async isExists(){try{let e=await this.sqlite.isDBExists({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isTable(e){try{let t=await this.sqlite.isTableExists({database:this.dbName,table:e,readonly:this.readonly});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isDBOpen(){try{let e=await this.sqlite.isDBOpen({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async delete(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.deleteDatabase({database:this.dbName,readonly:!1}),Promise.resolve())}catch(e){return Promise.reject(e)}}async createSyncTable(){try{if(this.readonly)return Promise.reject("not allowed in read-only mode");{let e=await this.sqlite.createSyncTable({database:this.dbName,readonly:!1});return Promise.resolve(e)}}catch(e){return Promise.reject(e)}}async setSyncDate(e){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.setSyncDate({database:this.dbName,syncdate:e,readonly:!1}),Promise.resolve())}catch(t){return Promise.reject(t)}}async getSyncDate(){try{let e=await this.sqlite.getSyncDate({database:this.dbName,readonly:this.readonly}),t="";return e.syncDate>0&&(t=new Date(e.syncDate*1e3).toISOString()),Promise.resolve(t)}catch(e){return Promise.reject(e)}}async exportToJson(e,t=!1){try{let r=await this.sqlite.exportToJson({database:this.dbName,jsonexportmode:e,readonly:this.readonly,encrypted:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}}async deleteExportedRows(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.deleteExportedRows({database:this.dbName,readonly:!1}),Promise.resolve())}catch(e){return Promise.reject(e)}}async executeTransaction(e,t=!0){let r=0,n=!1;if(this.readonly)return Promise.reject("not allowed in read-only mode");if(await this.sqlite.beginTransaction({database:this.dbName}),n=await this.sqlite.isTransactionActive({database:this.dbName}),!n)return Promise.reject("After Begin Transaction, no transaction active");try{for(let l of e){if(typeof l!="object"||!("statement"in l))throw new Error("Error a task.statement must be provided");if("values"in l&&l.values&&l.values.length>0){let h=l.statement.toUpperCase().includes("RETURNING")?"all":"no",w=await this.sqlite.run({database:this.dbName,statement:l.statement,values:l.values,transaction:!1,readonly:!1,returnMode:h,isSQL92:t});if(w.changes.changes<0)throw new Error("Error in transaction method run ");r+=w.changes.changes}else{let h=await this.sqlite.execute({database:this.dbName,statements:l.statement,transaction:!1,readonly:!1});if(h.changes.changes<0)throw new Error("Error in transaction method execute ");r+=h.changes.changes}}let s=await this.sqlite.commitTransaction({database:this.dbName});r+=s.changes.changes;let o={changes:{changes:r}};return Promise.resolve(o)}catch(s){let o=s.message?s.message:s;return await this.sqlite.rollbackTransaction({database:this.dbName}),Promise.reject(o)}}async reorderRows(e){let t=e;if(e!=null&&e.values&&typeof e.values[0]=="object"&&Object.keys(e.values[0]).includes("ios_columns")){let r=e.values[0].ios_columns,n=[];for(let s=1;s<e.values.length;s++){let o=e.values[s],l={};for(let h of r)l[h]=o[h];n.push(l)}t.values=n}return Promise.resolve(t)}}});var V={};J(V,{CapacitorSQLiteWeb:()=>_});var _,Z=A(()=>{z();_=class extends C{constructor(){super(...arguments),this.jeepSqliteElement=null,this.isWebStoreOpen=!1}async initWebStore(){await customElements.whenDefined("jeep-sqlite"),this.jeepSqliteElement=document.querySelector("jeep-sqlite"),this.ensureJeepSqliteIsAvailable(),this.jeepSqliteElement.addEventListener("jeepSqliteImportProgress",e=>{this.notifyListeners("sqliteImportProgressEvent",e.detail)}),this.jeepSqliteElement.addEventListener("jeepSqliteExportProgress",e=>{this.notifyListeners("sqliteExportProgressEvent",e.detail)}),this.jeepSqliteElement.addEventListener("jeepSqliteHTTPRequestEnded",e=>{this.notifyListeners("sqliteHTTPRequestEndedEvent",e.detail)}),this.jeepSqliteElement.addEventListener("jeepSqlitePickDatabaseEnded",e=>{this.notifyListeners("sqlitePickDatabaseEndedEvent",e.detail)}),this.jeepSqliteElement.addEventListener("jeepSqliteSaveDatabaseToDisk",e=>{this.notifyListeners("sqliteSaveDatabaseToDiskEvent",e.detail)}),this.isWebStoreOpen||(this.isWebStoreOpen=await this.jeepSqliteElement.isStoreOpen())}async saveToStore(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.saveToStore(e);return}catch(t){throw new Error(`${t}`)}}async getFromLocalDiskToStore(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.getFromLocalDiskToStore(e);return}catch(t){throw new Error(`${t}`)}}async saveToLocalDisk(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.saveToLocalDisk(e);return}catch(t){throw new Error(`${t}`)}}async echo(e){return this.ensureJeepSqliteIsAvailable(),await this.jeepSqliteElement.echo(e)}async createConnection(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.createConnection(e);return}catch(t){throw new Error(`${t}`)}}async open(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.open(e);return}catch(t){throw new Error(`${t}`)}}async closeConnection(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.closeConnection(e);return}catch(t){throw new Error(`${t}`)}}async getVersion(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.getVersion(e)}catch(t){throw new Error(`${t}`)}}async checkConnectionsConsistency(e){this.ensureJeepSqliteIsAvailable();try{return await this.jeepSqliteElement.checkConnectionsConsistency(e)}catch(t){throw new Error(`${t}`)}}async close(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.close(e);return}catch(t){throw new Error(`${t}`)}}async beginTransaction(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.beginTransaction(e)}catch(t){throw new Error(`${t}`)}}async commitTransaction(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.commitTransaction(e)}catch(t){throw new Error(`${t}`)}}async rollbackTransaction(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.rollbackTransaction(e)}catch(t){throw new Error(`${t}`)}}async isTransactionActive(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isTransactionActive(e)}catch(t){throw new Error(`${t}`)}}async getTableList(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.getTableList(e)}catch(t){throw new Error(`${t}`)}}async execute(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.execute(e)}catch(t){throw new Error(`${t}`)}}async executeSet(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.executeSet(e)}catch(t){throw new Error(`${t}`)}}async run(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.run(e)}catch(t){throw new Error(`${t}`)}}async query(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.query(e)}catch(t){throw new Error(`${t}`)}}async isDBExists(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isDBExists(e)}catch(t){throw new Error(`${t}`)}}async isDBOpen(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isDBOpen(e)}catch(t){throw new Error(`${t}`)}}async isDatabase(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isDatabase(e)}catch(t){throw new Error(`${t}`)}}async isTableExists(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isTableExists(e)}catch(t){throw new Error(`${t}`)}}async deleteDatabase(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.deleteDatabase(e);return}catch(t){throw new Error(`${t}`)}}async isJsonValid(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isJsonValid(e)}catch(t){throw new Error(`${t}`)}}async importFromJson(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.importFromJson(e)}catch(t){throw new Error(`${t}`)}}async exportToJson(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.exportToJson(e)}catch(t){throw new Error(`${t}`)}}async createSyncTable(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.createSyncTable(e)}catch(t){throw new Error(`${t}`)}}async setSyncDate(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.setSyncDate(e);return}catch(t){throw new Error(`${t}`)}}async getSyncDate(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.getSyncDate(e)}catch(t){throw new Error(`${t}`)}}async deleteExportedRows(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.deleteExportedRows(e);return}catch(t){throw new Error(`${t}`)}}async addUpgradeStatement(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.addUpgradeStatement(e);return}catch(t){throw new Error(`${t}`)}}async copyFromAssets(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.copyFromAssets(e);return}catch(t){throw new Error(`${t}`)}}async getFromHTTPRequest(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.getFromHTTPRequest(e);return}catch(t){throw new Error(`${t}`)}}async getDatabaseList(){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.getDatabaseList()}catch(e){throw new Error(`${e}`)}}ensureJeepSqliteIsAvailable(){if(this.jeepSqliteElement===null)throw new Error("The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.")}ensureWebstoreIsOpen(){if(!this.isWebStoreOpen)throw new Error('WebStore is not open yet. You have to call "initWebStore()" first.')}async getUrl(){throw this.unimplemented("Not implemented on web.")}async getMigratableDbList(e){throw console.log("getMigratableDbList",e),this.unimplemented("Not implemented on web.")}async addSQLiteSuffix(e){throw console.log("addSQLiteSuffix",e),this.unimplemented("Not implemented on web.")}async deleteOldDatabases(e){throw console.log("deleteOldDatabases",e),this.unimplemented("Not implemented on web.")}async moveDatabasesAndAddSuffix(e){throw console.log("moveDatabasesAndAddSuffix",e),this.unimplemented("Not implemented on web.")}async isSecretStored(){throw this.unimplemented("Not implemented on web.")}async setEncryptionSecret(e){throw console.log("setEncryptionSecret",e),this.unimplemented("Not implemented on web.")}async changeEncryptionSecret(e){throw console.log("changeEncryptionSecret",e),this.unimplemented("Not implemented on web.")}async clearEncryptionSecret(){throw console.log("clearEncryptionSecret"),this.unimplemented("Not implemented on web.")}async checkEncryptionSecret(e){throw console.log("checkEncryptionPassPhrase",e),this.unimplemented("Not implemented on web.")}async getNCDatabasePath(e){throw console.log("getNCDatabasePath",e),this.unimplemented("Not implemented on web.")}async createNCConnection(e){throw console.log("createNCConnection",e),this.unimplemented("Not implemented on web.")}async closeNCConnection(e){throw console.log("closeNCConnection",e),this.unimplemented("Not implemented on web.")}async isNCDatabase(e){throw console.log("isNCDatabase",e),this.unimplemented("Not implemented on web.")}async isDatabaseEncrypted(e){throw console.log("isDatabaseEncrypted",e),this.unimplemented("Not implemented on web.")}async isInConfigEncryption(){throw this.unimplemented("Not implemented on web.")}async isInConfigBiometricAuth(){throw this.unimplemented("Not implemented on web.")}async loadExtension(e){throw console.log("loadExtension",e),this.unimplemented("Not implemented on web.")}async enableLoadExtension(e){throw console.log("enableLoadExtension",e),this.unimplemented("Not implemented on web.")}}});var Q,X=A(()=>{z();U();Q=M("CapacitorSQLite",{web:()=>Promise.resolve().then(()=>(Z(),V)).then(i=>new i.CapacitorSQLiteWeb),electron:()=>window.CapacitorCustomPlatform.plugins.CapacitorSQLite})});var Y={};J(Y,{getDaten:()=>de,initDatabase:()=>ue,updateFeld:()=>he});async function ue(){return j=await ce.createConnection("tcgdex",!1,"no-encryption",1),await j.open(),await j.execute(`
    CREATE TABLE IF NOT EXISTS kartendex (
      id INTEGER PRIMARY KEY,
      dex TEXT,
      name TEXT,
      reverse TEXT,
      holo TEXT,
      v TEXT,
      vmax TEXT,
      vstar TEXT,
      ex TEXT,
      shiny TEXT,
      fullart TEXT,
      rare TEXT,
      amazing TEXT,
      rainbow TEXT,
      gold TEXT,
      custom TEXT
    );
  `),(await j.query("SELECT COUNT(*) as count FROM kartendex")).values[0].count===0&&await j.execute(`
      INSERT INTO kartendex (id, dex, name)
      VALUES
        (1, '0001', 'Bisasam'),
        (2, '0002', 'Bisaknosp'),
        (3, '0003', 'Bisaflor'),
        (4, '0004', 'Glumanda'),
        (5, '0005', 'Glutexo'),
        (6, '0006', 'Glurak'),
        (7, '0007', 'Schiggy'),
        (8, '0008', 'Schillok'),
        (9, '0009', 'Turtok'),
        (10, '0010', 'Raupy'),
        (11, '0011', 'Safcon'),
        (12, '0012', 'Smettbo'),
        (13, '0013', 'Hornliu'),
        (14, '0014', 'Kokuna'),
        (15, '0015', 'Bibor'),
        (16, '0016', 'Taubsi'),
        (17, '0017', 'Tauboga'),
        (18, '0018', 'Tauboss'),
        (19, '0019', 'Rattfratz'),
        (20, '0020', 'Rattikarl'),
        (21, '0021', 'Habitak'),
        (22, '0022', 'Ibitak'),
        (23, '0023', 'Rettan'),
        (24, '0024', 'Arbok'),
        (25, '0025', 'Pikachu'),
        (26, '0026', 'Raichu'),
        (27, '0027', 'Sandan'),
        (28, '0028', 'Sandamer'),
        (29, '0029', 'Nidoran\u2640'),
        (30, '0030', 'Nidorina'),
        (31, '0031', 'Nidoqueen'),
        (32, '0032', 'Nidoran\u2642'),
        (33, '0033', 'Nidorino'),
        (34, '0034', 'Nidoking'),
        (35, '0035', 'Piepi'),
        (36, '0036', 'Pixi'),
        (37, '0037', 'Vulpix'),
        (38, '0038', 'Vulnona'),
        (39, '0039', 'Pummeluff'),
        (40, '0040', 'Knuddeluff'),
        (41, '0041', 'Zubat'),
        (42, '0042', 'Golbat'),
        (43, '0043', 'Myrapla'),
        (44, '0044', 'Duflor'),
        (45, '0045', 'Giflor'),
        (46, '0046', 'Paras'),
        (47, '0047', 'Parasek'),
        (48, '0048', 'Bluzuk'),
        (49, '0049', 'Omot'),
        (50, '0050', 'Digda'),
        (51, '0051', 'Digdri'),
        (52, '0052', 'Mauzi'),
        (53, '0053', 'Snobilikat'),
        (54, '0054', 'Enton'),
        (55, '0055', 'Entoron'),
        (56, '0056', 'Menki'),
        (57, '0057', 'Rasaff'),
        (58, '0058', 'Fukano'),
        (59, '0059', 'Arkani'),
        (60, '0060', 'Quapsel'),
        (61, '0061', 'Quaputzi'),
        (62, '0062', 'Quappo'),
        (63, '0063', 'Abra'),
        (64, '0064', 'Kadabra'),
        (65, '0065', 'Simsala'),
        (66, '0066', 'Machollo'),
        (67, '0067', 'Maschock'),
        (68, '0068', 'Machomei'),
        (69, '0069', 'Knofensa'),
        (70, '0070', 'Ultrigaria'),
        (71, '0071', 'Sarzenia'),
        (72, '0072', 'Tentacha'),
        (73, '0073', 'Tentoxa'),
        (74, '0074', 'Kleinstein'),
        (75, '0075', 'Georok'),
        (76, '0076', 'Geowaz'),
        (77, '0077', 'Ponita'),
        (78, '0078', 'Gallopa'),
        (79, '0079', 'Flegmon'),
        (80, '0080', 'Lahmus'),
        (81, '0081', 'Magnetilo'),
        (82, '0082', 'Magneton'),
        (83, '0083', 'Porenta'),
        (84, '0084', 'Dodu'),
        (85, '0085', 'Dodri'),
        (86, '0086', 'Jurob'),
        (87, '0087', 'Jugong'),
        (88, '0088', 'Sleima'),
        (89, '0089', 'Sleimok'),
        (90, '0090', 'Muschas'),
        (91, '0091', 'Austos'),
        (92, '0092', 'Nebulak'),
        (93, '0093', 'Alpollo'),
        (94, '0094', 'Gengar'),
        (95, '0095', 'Onix'),
        (96, '0096', 'Traumato'),
        (97, '0097', 'Hypno'),
        (98, '0098', 'Krabby'),
        (99, '0099', 'Kingler'),
        (100, '0100', 'Voltobal'),
        (101, '0101', 'Lektrobal'),
        (102, '0102', 'Owei'),
        (103, '0103', 'Kokowei'),
        (104, '0104', 'Tragosso'),
        (105, '0105', 'Knogga'),
        (106, '0106', 'Kicklee'),
        (107, '0107', 'Nockchan'),
        (108, '0108', 'Schlurp'),
        (109, '0109', 'Smogon'),
        (110, '0110', 'Smogmog'),
        (111, '0111', 'Rihorn'),
        (112, '0112', 'Rizeros'),
        (113, '0113', 'Chaneira'),
        (114, '0114', 'Tangela'),
        (115, '0115', 'Kangama'),
        (116, '0116', 'Seeper'),
        (117, '0117', 'Seemon'),
        (118, '0118', 'Goldini'),
        (119, '0119', 'Golking'),
        (120, '0120', 'Sterndu'),
        (121, '0121', 'Starmie'),
        (122, '0122', 'Pantimos'),
        (123, '0123', 'Sichlor'),
        (124, '0124', 'Rossana'),
        (125, '0125', 'Elektek'),
        (126, '0126', 'Magmar'),
        (127, '0127', 'Pinsir'),
        (128, '0128', 'Tauros'),
        (129, '0129', 'Karpador'),
        (130, '0130', 'Garados'),
        (131, '0131', 'Lapras'),
        (132, '0132', 'Ditto'),
        (133, '0133', 'Evoli'),
        (134, '0134', 'Aquana'),
        (135, '0135', 'Blitza'),
        (136, '0136', 'Flamara'),
        (137, '0137', 'Porygon'),
        (138, '0138', 'Amonitas'),
        (139, '0139', 'Amoroso'),
        (140, '0140', 'Kabuto'),
        (141, '0141', 'Kabutops'),
        (142, '0142', 'Aerodactyl'),
        (143, '0143', 'Relaxo'),
        (144, '0144', 'Arktos'),
        (145, '0145', 'Zapdos'),
        (146, '0146', 'Lavados'),
        (147, '0147', 'Dratini'),
        (148, '0148', 'Dragonir'),
        (149, '0149', 'Dragoran'),
        (150, '0150', 'Mewtu'),
        (151, '0151', 'Mew'),
        (152, '0152', 'Endivie'),
        (153, '0153', 'Lorblatt'),
        (154, '0154', 'Meganie'),
        (155, '0155', 'Feurigel'),
        (156, '0156', 'Igelavar'),
        (157, '0157', 'Tornupto'),
        (158, '0158', 'Karnimani'),
        (159, '0159', 'Tyracroc'),
        (160, '0160', 'Impergator'),
        (161, '0161', 'Wiesor'),
        (162, '0162', 'Wiesenior'),
        (163, '0163', 'Hoothoot'),
        (164, '0164', 'Noctuh'),
        (165, '0165', 'Ledyba'),
        (166, '0166', 'Ledian'),
        (167, '0167', 'Webarak'),
        (168, '0168', 'Ariados'),
        (169, '0169', 'Iksbat'),
        (170, '0170', 'Lampi'),
        (171, '0171', 'Lanturn'),
        (172, '0172', 'Pichu'),
        (173, '0173', 'Pii'),
        (174, '0174', 'Fluffeluff'),
        (175, '0175', 'Togepi'),
        (176, '0176', 'Togetic'),
        (177, '0177', 'Natu'),
        (178, '0178', 'Xatu'),
        (179, '0179', 'Voltilamm'),
        (180, '0180', 'Waaty'),
        (181, '0181', 'Ampharos'),
        (182, '0182', 'Blubella'),
        (183, '0183', 'Marill'),
        (184, '0184', 'Azumarill'),
        (185, '0185', 'Mogelbaum'),
        (186, '0186', 'Quaxo'),
        (187, '0187', 'Hoppspross'),
        (188, '0188', 'Hubelupf'),
        (189, '0189', 'Papungha'),
        (190, '0190', 'Griffel'),
        (191, '0191', 'Sonnkern'),
        (192, '0192', 'Sonnflora'),
        (193, '0193', 'Yanma'),
        (194, '0194', 'Felino'),
        (195, '0195', 'Morlord'),
        (196, '0196', 'Psiana'),
        (197, '0197', 'Nachtara'),
        (198, '0198', 'Kramurx'),
        (199, '0199', 'Laschoking'),
        (200, '0200', 'Traunfugil'),
        (201, '0201', 'Icognito'),
        (202, '0202', 'Woingenau'),
        (203, '0203', 'Girafarig'),
        (204, '0204', 'Tannza'),
        (205, '0205', 'Forstellka'),
        (206, '0206', 'Dummisel'),
        (207, '0207', 'Skorgla'),
        (208, '0208', 'Stahlos'),
        (209, '0209', 'Snubbull'),
        (210, '0210', 'Granbull'),
        (211, '0211', 'Baldorfish'),
        (212, '0212', 'Scherox'),
        (213, '0213', 'Pottrott'),
        (214, '0214', 'Skaraborn'),
        (215, '0215', 'Sniebel'),
        (216, '0216', 'Teddiursa'),
        (217, '0217', 'Ursaring'),
        (218, '0218', 'Schneckmag'),
        (219, '0219', 'Magcargo'),
        (220, '0220', 'Quiekel'),
        (221, '0221', 'Keifel'),
        (222, '0222', 'Corasonn'),
        (223, '0223', 'Remoraid'),
        (224, '0224', 'Octillery'),
        (225, '0225', 'Botogel'),
        (226, '0226', 'Mantax'),
        (227, '0227', 'Panzaeron'),
        (228, '0228', 'Hunduster'),
        (229, '0229', 'Hundemon'),
        (230, '0230', 'Seedraking'),
        (231, '0231', 'Phanpy'),
        (232, '0232', 'Donphan'),
        (233, '0233', 'Porygon2'),
        (234, '0234', 'Damhirplex'),
        (235, '0235', 'Farbeagle'),
        (236, '0236', 'Rabauz'),
        (237, '0237', 'Kapoera'),
        (238, '0238', 'Kussilla'),
        (239, '0239', 'Elekid'),
        (240, '0240', 'Magby'),
        (241, '0241', 'Miltank'),
        (242, '0242', 'Heiteira'),
        (243, '0243', 'Raikou'),
        (244, '0244', 'Entei'),
        (245, '0245', 'Suicune'),
        (246, '0246', 'Larvitar'),
        (247, '0247', 'Pupitar'),
        (248, '0248', 'Despotar'),
        (249, '0249', 'Lugia'),
        (250, '0250', 'Ho-Oh'),
        (251, '0251', 'Celebi'),
        (252, '0252', 'Geckarbor'),
        (253, '0253', 'Reptain'),
        (254, '0254', 'Gewaldro'),
        (255, '0255', 'Flemmli'),
        (256, '0256', 'Jungglut'),
        (257, '0257', 'Lohgock'),
        (258, '0258', 'Hydropi'),
        (259, '0259', 'Moorabbel'),
        (260, '0260', 'Sumpex'),
        (261, '0261', 'Fiffyen'),
        (262, '0262', 'Magnayen'),
        (263, '0263', 'Zigzachs'),
        (264, '0264', 'Geradaks'),
        (265, '0265', 'Waumpel'),
        (266, '0266', 'Schaloko'),
        (267, '0267', 'Papinella'),
        (268, '0268', 'Panekon'),
        (269, '0269', 'Pudox'),
        (270, '0270', 'Loturzel'),
        (271, '0271', 'Lombrero'),
        (272, '0272', 'Kappalores'),
        (273, '0273', 'Samurzel'),
        (274, '0274', 'Blanas'),
        (275, '0275', 'Tengulist'),
        (276, '0276', 'Schwalbini'),
        (277, '0277', 'Schwalboss'),
        (278, '0278', 'Wingull'),
        (279, '0279', 'Pelipper'),
        (280, '0280', 'Trasla'),
        (281, '0281', 'Kirlia'),
        (282, '0282', 'Guardevoir'),
        (283, '0283', 'Gehweiher'),
        (284, '0284', 'Maskeregen'),
        (285, '0285', 'Knilz'),
        (286, '0286', 'Kapilz'),
        (287, '0287', 'Bummelz'),
        (288, '0288', 'Muntier'),
        (289, '0289', 'Letarking'),
        (290, '0290', 'Nincada'),
        (291, '0291', 'Ninjask'),
        (292, '0292', 'Ninjatom'),
        (293, '0293', 'Flurmel'),
        (294, '0294', 'Krakeelo'),
        (295, '0295', 'Krawumms'),
        (296, '0296', 'Makuhita'),
        (297, '0297', 'Hariyama'),
        (298, '0298', 'Azurill'),
        (299, '0299', 'Nasgnet'),
        (300, '0300', 'Eneco'),
        (301, '0301', 'Enekoro'),
        (302, '0302', 'Zobiris'),
        (303, '0303', 'Flunkifer'),
        (304, '0304', 'Stollunior'),
        (305, '0305', 'Stollrak'),
        (306, '0306', 'Stolloss'),
        (307, '0307', 'Meditie'),
        (308, '0308', 'Meditalis'),
        (309, '0309', 'Frizelbliz'),
        (310, '0310', 'Voltenso'),
        (311, '0311', 'Plusle'),
        (312, '0312', 'Minun'),
        (313, '0313', 'Volbeat'),
        (314, '0314', 'Illumise'),
        (315, '0315', 'Roselia'),
        (316, '0316', 'Schluppuck'),
        (317, '0317', 'Schlukwech'),
        (318, '0318', 'Kanivanha'),
        (319, '0319', 'Tohaido'),
        (320, '0320', 'Wailmer'),
        (321, '0321', 'Wailord'),
        (322, '0322', 'Camaub'),
        (323, '0323', 'Camerupt'),
        (324, '0324', 'Qurtel'),
        (325, '0325', 'Spoink'),
        (326, '0326', 'Groink'),
        (327, '0327', 'Pandir'),
        (328, '0328', 'Knacklion'),
        (329, '0329', 'Vibrava'),
        (330, '0330', 'Libelldra'),
        (331, '0331', 'Tuska'),
        (332, '0332', 'Noktuska'),
        (333, '0333', 'Wablu'),
        (334, '0334', 'Altaria'),
        (335, '0335', 'Sengo'),
        (336, '0336', 'Vipitis'),
        (337, '0337', 'Lunastein'),
        (338, '0338', 'Sonnfel'),
        (339, '0339', 'Schmerbe'),
        (340, '0340', 'Welsar'),
        (341, '0341', 'Krebscorps'),
        (342, '0342', 'Krebutack'),
        (343, '0343', 'Puppance'),
        (344, '0344', 'Lepumentas'),
        (345, '0345', 'Liliep'),
        (346, '0346', 'Wielie'),
        (347, '0347', 'Anorith'),
        (348, '0348', 'Armaldo'),
        (349, '0349', 'Barschwa'),
        (350, '0350', 'Milotic'),
        (351, '0351', 'Formeo'),
        (352, '0352', 'Kecleon'),
        (353, '0353', 'Shuppet'),
        (354, '0354', 'Banette'),
        (355, '0355', 'Zwirrlicht'),
        (356, '0356', 'Zwirrklop'),
        (357, '0357', 'Tropius'),
        (358, '0358', 'Palimpalim'),
        (359, '0359', 'Absol'),
        (360, '0360', 'Isso'),
        (361, '0361', 'Schneppke'),
        (362, '0362', 'Firnontor'),
        (363, '0363', 'Seemops'),
        (364, '0364', 'Seejong'),
        (365, '0365', 'Walraisa'),
        (366, '0366', 'Perlu'),
        (367, '0367', 'Aalabyss'),
        (368, '0368', 'Saganabyss'),
        (369, '0369', 'Relicanth'),
        (370, '0370', 'Liebiskus'),
        (371, '0371', 'Kindwurm'),
        (372, '0372', 'Draschel'),
        (373, '0373', 'Brutalanda'),
        (374, '0374', 'Tanhel'),
        (375, '0375', 'Metang'),
        (376, '0376', 'Metagross'),
        (377, '0377', 'Regirock'),
        (378, '0378', 'Regice'),
        (379, '0379', 'Registeel'),
        (380, '0380', 'Latias'),
        (381, '0381', 'Latios'),
        (382, '0382', 'Kyogre'),
        (383, '0383', 'Groudon'),
        (384, '0384', 'Rayquaza'),
        (385, '0385', 'Jirachi'),
        (386, '0386', 'Deoxys'),
        (387, '0387', 'Chelast'),
        (388, '0388', 'Chelcarain'),
        (389, '0389', 'Chelterrar'),
        (390, '0390', 'Panflam'),
        (391, '0391', 'Panpyro'),
        (392, '0392', 'Panferno'),
        (393, '0393', 'Plinfa'),
        (394, '0394', 'Pliprin'),
        (395, '0395', 'Impoleon'),
        (396, '0396', 'Staralili'),
        (397, '0397', 'Staravia'),
        (398, '0398', 'Staraptor'),
        (399, '0399', 'Bidiza'),
        (400, '0400', 'Bidifas'),
        (401, '0401', 'Zirpurze'),
        (402, '0402', 'Zirpeise'),
        (403, '0403', 'Sheinux'),
        (404, '0404', 'Luxio'),
        (405, '0405', 'Luxtra'),
        (406, '0406', 'Knospi'),
        (407, '0407', 'Roserade'),
        (408, '0408', 'Koknodon'),
        (409, '0409', 'Rameidon'),
        (410, '0410', 'Schilterus'),
        (411, '0411', 'Bollterus'),
        (412, '0412', 'Burmy'),
        (413, '0413', 'Burmadame'),
        (414, '0414', 'Moterpel'),
        (415, '0415', 'Wadribie'),
        (416, '0416', 'Honweisel'),
        (417, '0417', 'Pachirisu'),
        (418, '0418', 'Bamelin'),
        (419, '0419', 'Bojelin'),
        (420, '0420', 'Kikugi'),
        (421, '0421', 'Kinoso'),
        (422, '0422', 'Schalellos'),
        (423, '0423', 'Gastrodon'),
        (424, '0424', 'Ambidiffel'),
        (425, '0425', 'Driftlon'),
        (426, '0426', 'Drifzepeli'),
        (427, '0427', 'Haspiror'),
        (428, '0428', 'Schlapor'),
        (429, '0429', 'Traunmagil'),
        (430, '0430', 'Kramshef'),
        (431, '0431', 'Charmian'),
        (432, '0432', 'Shnurgarst'),
        (433, '0433', 'Klingplim'),
        (434, '0434', 'Skunkapuh'),
        (435, '0435', 'Skuntank'),
        (436, '0436', 'Bronzel'),
        (437, '0437', 'Bronzong'),
        (438, '0438', 'Mobai'),
        (439, '0439', 'Pantimimi'),
        (440, '0440', 'Wonneira'),
        (441, '0441', 'Plaudagei'),
        (442, '0442', 'Kryppuk'),
        (443, '0443', 'Kaumalat'),
        (444, '0444', 'Knarksel'),
        (445, '0445', 'Knakrack'),
        (446, '0446', 'Mampfaxo'),
        (447, '0447', 'Riolu'),
        (448, '0448', 'Lucario'),
        (449, '0449', 'Hippopotas'),
        (450, '0450', 'Hippoterus'),
        (451, '0451', 'Pionskora'),
        (452, '0452', 'Piondragi'),
        (453, '0453', 'Glibunkel'),
        (454, '0454', 'Toxiquak'),
        (455, '0455', 'Venuflibis'),
        (456, '0456', 'Finneon'),
        (457, '0457', 'Lumineon'),
        (458, '0458', 'Mantirps'),
        (459, '0459', 'Shnebedeck'),
        (460, '0460', 'Rexblisar'),
        (461, '0461', 'Snibunna'),
        (462, '0462', 'Magnezone'),
        (463, '0463', 'Schlurplek'),
        (464, '0464', 'Rihornior'),
        (465, '0465', 'Tangoloss'),
        (466, '0466', 'Elevoltek'),
        (467, '0467', 'Magbrant'),
        (468, '0468', 'Togekiss'),
        (469, '0469', 'Yanmega'),
        (470, '0470', 'Folipurba'),
        (471, '0471', 'Glaziola'),
        (472, '0472', 'Skorgro'),
        (473, '0473', 'Mamutel'),
        (474, '0474', 'Porygon-Z'),
        (475, '0475', 'Galagladi'),
        (476, '0476', 'Voluminas'),
        (477, '0477', 'Zwirrfinst'),
        (478, '0478', 'Frosdedje'),
        (479, '0479', 'Rotom'),
        (480, '0480', 'Selfe'),
        (481, '0481', 'Vesprit'),
        (482, '0482', 'Tobutz'),
        (483, '0483', 'Dialga'),
        (484, '0484', 'Palkia'),
        (485, '0485', 'Heatran'),
        (486, '0486', 'Regigigas'),
        (487, '0487', 'Giratina'),
        (488, '0488', 'Cresselia'),
        (489, '0489', 'Phione'),
        (490, '0490', 'Manaphy'),
        (491, '0491', 'Darkrai'),
        (492, '0492', 'Shaymin'),
        (493, '0493', 'Arceus'),
        (494, '0494', 'Victini'),
        (495, '0495', 'Serpifeu'),
        (496, '0496', 'Efoserp'),
        (497, '0497', 'Serpiroyal'),
        (498, '0498', 'Floink'),
        (499, '0499', 'Ferkokel'),
        (500, '0500', 'Flambirex'),
        (501, '0501', 'Ottaro'),
        (502, '0502', 'Zwottronin'),
        (503, '0503', 'Admurai'),
        (504, '0504', 'Nagelotz'),
        (505, '0505', 'Kukmarda'),
        (506, '0506', 'Yorkleff'),
        (507, '0507', 'Terribark'),
        (508, '0508', 'Bissbark'),
        (509, '0509', 'Felilou'),
        (510, '0510', 'Kleoparda'),
        (511, '0511', 'Vegimak'),
        (512, '0512', 'Vegichita'),
        (513, '0513', 'Grillmak'),
        (514, '0514', 'Grillchita'),
        (515, '0515', 'Sodamak'),
        (516, '0516', 'Sodachita'),
        (517, '0517', 'Somniam'),
        (518, '0518', 'Somnivora'),
        (519, '0519', 'Dusselgurr'),
        (520, '0520', 'Navitaub'),
        (521, '0521', 'Fasasnob'),
        (522, '0522', 'Elezeba'),
        (523, '0523', 'Zebritz'),
        (524, '0524', 'Kiesling'),
        (525, '0525', 'Sedimantur'),
        (526, '0526', 'Brockoloss'),
        (527, '0527', 'Fleknoil'),
        (528, '0528', 'Fletiamo'),
        (529, '0529', 'Rotomurf'),
        (530, '0530', 'Stalobor'),
        (531, '0531', 'Ohrdoch'),
        (532, '0532', 'Praktibalk'),
        (533, '0533', 'Strepoli'),
        (534, '0534', 'Meistagrif'),
        (535, '0535', 'Schallquap'),
        (536, '0536', 'Mebrana'),
        (537, '0537', 'Branawarz'),
        (538, '0538', 'Jiutesto'),
        (539, '0539', 'Karadonis'),
        (540, '0540', 'Strawickl'),
        (541, '0541', 'Folikon'),
        (542, '0542', 'Matrifol'),
        (543, '0543', 'Toxiped'),
        (544, '0544', 'Rollum'),
        (545, '0545', 'Cerapendra'),
        (546, '0546', 'Waumboll'),
        (547, '0547', 'Elfun'),
        (548, '0548', 'Lilminip'),
        (549, '0549', 'Dressella'),
        (550, '0550', 'Barschuft'),
        (551, '0551', 'Ganovil'),
        (552, '0552', 'Rokkaiman'),
        (553, '0553', 'Rabigator'),
        (554, '0554', 'Flampion'),
        (555, '0555', 'Flampivian'),
        (556, '0556', 'Maracamba'),
        (557, '0557', 'Lithomith'),
        (558, '0558', 'Castellith'),
        (559, '0559', 'Zurrokex'),
        (560, '0560', 'Irokex'),
        (561, '0561', 'Symvolara'),
        (562, '0562', 'Makabaja'),
        (563, '0563', 'Echnatoll'),
        (564, '0564', 'Galapaflos'),
        (565, '0565', 'Karippas'),
        (566, '0566', 'Flapteryx'),
        (567, '0567', 'Aeropteryx'),
        (568, '0568', 'Unrat\xFCtox'),
        (569, '0569', 'Deponitox'),
        (570, '0570', 'Zorua'),
        (571, '0571', 'Zoroark'),
        (572, '0572', 'Picochilla'),
        (573, '0573', 'Chillabell'),
        (574, '0574', 'Mollimorba'),
        (575, '0575', 'Hypnomorba'),
        (576, '0576', 'Morbitesse'),
        (577, '0577', 'Monozyto'),
        (578, '0578', 'Mitodos'),
        (579, '0579', 'Zytomega'),
        (580, '0580', 'Piccolente'),
        (581, '0581', 'Swaroness'),
        (582, '0582', 'Gelatini'),
        (583, '0583', 'Gelatroppo'),
        (584, '0584', 'Gelatwino'),
        (585, '0585', 'Sesokitz'),
        (586, '0586', 'Kronjuwild'),
        (587, '0587', 'Emolga'),
        (588, '0588', 'Laukaps'),
        (589, '0589', 'Cavalanzas'),
        (590, '0590', 'Tarnpignon'),
        (591, '0591', 'Hutsassa'),
        (592, '0592', 'Quabbel'),
        (593, '0593', 'Apoquallyp'),
        (594, '0594', 'Mamolida'),
        (595, '0595', 'Wattzapf'),
        (596, '0596', 'Voltula'),
        (597, '0597', 'Kastadur'),
        (598, '0598', 'Tentantel'),
        (599, '0599', 'Klikk'),
        (600, '0600', 'Kliklak'),
        (601, '0601', 'Klikdiklak'),
        (602, '0602', 'Zapplardin'),
        (603, '0603', 'Zapplalek'),
        (604, '0604', 'Zapplarang'),
        (605, '0605', 'Pygraulon'),
        (606, '0606', 'Megalon'),
        (607, '0607', 'Lichtel'),
        (608, '0608', 'Laternecto'),
        (609, '0609', 'Skelabra'),
        (610, '0610', 'Milza'),
        (611, '0611', 'Sharfax'),
        (612, '0612', 'Maxax'),
        (613, '0613', 'Petznief'),
        (614, '0614', 'Siberio'),
        (615, '0615', 'Frigometri'),
        (616, '0616', 'Schnuthelm'),
        (617, '0617', 'Hydragil'),
        (618, '0618', 'Flunschlik'),
        (619, '0619', 'Lin-Fu'),
        (620, '0620', 'Wie-Shu'),
        (621, '0621', 'Shardrago'),
        (622, '0622', 'Golbit'),
        (623, '0623', 'Golgantes'),
        (624, '0624', 'Gladiantri'),
        (625, '0625', 'Caesurio'),
        (626, '0626', 'Bisofank'),
        (627, '0627', 'Geronimatz'),
        (628, '0628', 'Washakwil'),
        (629, '0629', 'Skallyk'),
        (630, '0630', 'Grypheldis'),
        (631, '0631', 'Furnifra\xDF'),
        (632, '0632', 'Fermicula'),
        (633, '0633', 'Kapuno'),
        (634, '0634', 'Duodino'),
        (635, '0635', 'Trikephalo'),
        (636, '0636', 'Ignivor'),
        (637, '0637', 'Ramoth'),
        (638, '0638', 'Kobalium'),
        (639, '0639', 'Terrakium'),
        (640, '0640', 'Viridium'),
        (641, '0641', 'Boreos'),
        (642, '0642', 'Voltolos'),
        (643, '0643', 'Reshiram'),
        (644, '0644', 'Zekrom'),
        (645, '0645', 'Demeteros'),
        (646, '0646', 'Kyurem'),
        (647, '0647', 'Keldeo'),
        (648, '0648', 'Meloetta'),
        (649, '0649', 'Genesect'),
        (650, '0650', 'Igamaro'),
        (651, '0651', 'Igastarnish'),
        (652, '0652', 'Brigaron'),
        (653, '0653', 'Fynx'),
        (654, '0654', 'Rutena'),
        (655, '0655', 'Fennexis'),
        (656, '0656', 'Froxy'),
        (657, '0657', 'Amphizel'),
        (658, '0658', 'Quajutsu'),
        (659, '0659', 'Scoppel'),
        (660, '0660', 'Grebbit'),
        (661, '0661', 'Dartiri'),
        (662, '0662', 'Dartignis'),
        (663, '0663', 'Fiaro'),
        (664, '0664', 'Purmel'),
        (665, '0665', 'Puponcho'),
        (666, '0666', 'Vivillon'),
        (667, '0667', 'Leufeo'),
        (668, '0668', 'Pyroleo'),
        (669, '0669', 'Flab\xE9b\xE9'),
        (670, '0670', 'Floette'),
        (671, '0671', 'Florges'),
        (672, '0672', 'M\xE4hikel'),
        (673, '0673', 'Chevrumm'),
        (674, '0674', 'Pam-Pam'),
        (675, '0675', 'Pandagro'),
        (676, '0676', 'Coiffwaff'),
        (677, '0677', 'Psiau'),
        (678, '0678', 'Psiaugon'),
        (679, '0679', 'Gramokles'),
        (680, '0680', 'Duokles'),
        (681, '0681', 'Durengard'),
        (682, '0682', 'Parfi'),
        (683, '0683', 'Parfinesse'),
        (684, '0684', 'Flauschling'),
        (685, '0685', 'Sabbaione'),
        (686, '0686', 'Iscalar'),
        (687, '0687', 'Calamanero'),
        (688, '0688', 'Bithora'),
        (689, '0689', 'Thanathora'),
        (690, '0690', 'Algitt'),
        (691, '0691', 'Tandrak'),
        (692, '0692', 'Scampisto'),
        (693, '0693', 'Wummer'),
        (694, '0694', 'Eguana'),
        (695, '0695', 'Elezard'),
        (696, '0696', 'Balgoras'),
        (697, '0697', 'Monargoras'),
        (698, '0698', 'Amarino'),
        (699, '0699', 'Amagarga'),
        (700, '0700', 'Feelinara'),
        (701, '0701', 'Resladero'),
        (702, '0702', 'Dedenne'),
        (703, '0703', 'Rocara'),
        (704, '0704', 'Viscora'),
        (705, '0705', 'Viscargot'),
        (706, '0706', 'Viscogon'),
        (707, '0707', 'Clavion'),
        (708, '0708', 'Paragoni'),
        (709, '0709', 'Trombork'),
        (710, '0710', 'Irrbis'),
        (711, '0711', 'Pumpdjinn'),
        (712, '0712', 'Arktip'),
        (713, '0713', 'Arktilas'),
        (714, '0714', 'eF-eM'),
        (715, '0715', 'UHaFnir'),
        (716, '0716', 'Xerneas'),
        (717, '0717', 'Yveltal'),
        (718, '0718', 'Zygarde'),
        (719, '0719', 'Diancie'),
        (720, '0720', 'Hoopa'),
        (721, '0721', 'Volcanion'),
        (722, '0722', 'Bauz'),
        (723, '0723', 'Arboretoss'),
        (724, '0724', 'Silvarro'),
        (725, '0725', 'Flamiau'),
        (726, '0726', 'Miezunder'),
        (727, '0727', 'Fuegro'),
        (728, '0728', 'Robball'),
        (729, '0729', 'Marikeck'),
        (730, '0730', 'Primarene'),
        (731, '0731', 'Peppeck'),
        (732, '0732', 'Trompeck'),
        (733, '0733', 'Tukanon'),
        (734, '0734', 'Mangunior'),
        (735, '0735', 'Manguspektor'),
        (736, '0736', 'Mabula'),
        (737, '0737', 'Akkup'),
        (738, '0738', 'Donarion'),
        (739, '0739', 'Krabbox'),
        (740, '0740', 'Krawell'),
        (741, '0741', 'Choreogel'),
        (742, '0742', 'Wommel'),
        (743, '0743', 'Bandelby'),
        (744, '0744', 'Wuffels'),
        (745, '0745', 'Wolwerock'),
        (746, '0746', 'Lusardin'),
        (747, '0747', 'Garstella'),
        (748, '0748', 'Aggrostella'),
        (749, '0749', 'Pampuli'),
        (750, '0750', 'Pampross'),
        (751, '0751', 'Araqua'),
        (752, '0752', 'Aranestro'),
        (753, '0753', 'Imantis'),
        (754, '0754', 'Mantidea'),
        (755, '0755', 'Bubungus'),
        (756, '0756', 'Lamellux'),
        (757, '0757', 'Molunk'),
        (758, '0758', 'Amfira'),
        (759, '0759', 'Velursi'),
        (760, '0760', 'Kosturso'),
        (761, '0761', 'Frubberl'),
        (762, '0762', 'Frubaila'),
        (763, '0763', 'Fruyal'),
        (764, '0764', 'Curelei'),
        (765, '0765', 'Kommandutan'),
        (766, '0766', 'Quartermak'),
        (767, '0767', 'Rei\xDFlaus'),
        (768, '0768', 'Tectass'),
        (769, '0769', 'Sankabuh'),
        (770, '0770', 'Colossand'),
        (771, '0771', 'Gufa'),
        (772, '0772', 'Typ:Null'),
        (773, '0773', 'Amigento'),
        (774, '0774', 'Meteno'),
        (775, '0775', 'Koalelu'),
        (776, '0776', 'Tortunator'),
        (777, '0777', 'Togedemaru'),
        (778, '0778', 'Mimigma'),
        (779, '0779', 'Knirfish'),
        (780, '0780', 'Sen-Long'),
        (781, '0781', 'Moruda'),
        (782, '0782', 'Miniras'),
        (783, '0783', 'Mediras'),
        (784, '0784', 'Grandiras'),
        (785, '0785', 'Kapu-Riki'),
        (786, '0786', 'Kapu-Fala'),
        (787, '0787', 'Kapu-Toro'),
        (788, '0788', 'Kapu-Kime'),
        (789, '0789', 'Cosmog'),
        (790, '0790', 'Cosmovum'),
        (791, '0791', 'Solgaleo'),
        (792, '0792', 'Lunala'),
        (793, '0793', 'Anego'),
        (794, '0794', 'Masskito'),
        (795, '0795', 'Schabelle'),
        (796, '0796', 'Voltriant'),
        (797, '0797', 'Kaguron'),
        (798, '0798', 'Katagami'),
        (799, '0799', 'Schlingking'),
        (800, '0800', 'Necrozma'),
        (801, '0801', 'Magearna'),
        (802, '0802', 'Marshadow'),
        (803, '0803', 'Venicro'),
        (804, '0804', 'Agoyon'),
        (805, '0805', 'Muramura'),
        (806, '0806', 'Kopplosio'),
        (807, '0807', 'Zeraora'),
        (808, '0808', 'Meltan'),
        (809, '0809', 'Melmetal'),
        (810, '0810', 'Chimpep'),
        (811, '0811', 'Chimstix'),
        (812, '0812', 'Gortrom'),
        (813, '0813', 'Hopplo'),
        (814, '0814', 'Kickerlo'),
        (815, '0815', 'Liberlo'),
        (816, '0816', 'Memmeon'),
        (817, '0817', 'Phlegleon'),
        (818, '0818', 'Intelleon'),
        (819, '0819', 'Raffel'),
        (820, '0820', 'Schlaraffel'),
        (821, '0821', 'Meikro'),
        (822, '0822', 'Kranoviz'),
        (823, '0823', 'Krarmor'),
        (824, '0824', 'Sensect'),
        (825, '0825', 'Keradar'),
        (826, '0826', 'Maritellit'),
        (827, '0827', 'Kleptifux'),
        (828, '0828', 'Gaunux'),
        (829, '0829', 'Cottini'),
        (830, '0830', 'Cottomi'),
        (831, '0831', 'Wolly'),
        (832, '0832', 'Zwollock'),
        (833, '0833', 'Kamehaps'),
        (834, '0834', 'Kamalm'),
        (835, '0835', 'Voldi'),
        (836, '0836', 'Bellektro'),
        (837, '0837', 'Klonkett'),
        (838, '0838', 'Wagong'),
        (839, '0839', 'Montecarbo'),
        (840, '0840', 'Knapfel'),
        (841, '0841', 'Drapfel'),
        (842, '0842', 'Schlapfel'),
        (843, '0843', 'Salanga'),
        (844, '0844', 'Sanaconda'),
        (845, '0845', 'Urgl'),
        (846, '0846', 'Pikuda'),
        (847, '0847', 'Barrakiefa'),
        (848, '0848', 'Toxel'),
        (849, '0849', 'Riffex'),
        (850, '0850', 'Thermopod'),
        (851, '0851', 'Infernopod'),
        (852, '0852', 'Klopptopus'),
        (853, '0853', 'Kaocto'),
        (854, '0854', 'Fatalitee'),
        (855, '0855', 'Mortipot'),
        (856, '0856', 'Brimova'),
        (857, '0857', 'Brimano'),
        (858, '0858', 'Silembrim'),
        (859, '0859', 'B\xE4hmon'),
        (860, '0860', 'Pelzebub'),
        (861, '0861', 'Olangaar'),
        (862, '0862', 'Barrikadax'),
        (863, '0863', 'Mauzinger'),
        (864, '0864', 'Gorgasonn'),
        (865, '0865', 'Lauchzelot'),
        (866, '0866', 'Pantifrost'),
        (867, '0867', 'Oghnatoll'),
        (868, '0868', 'Hokumil'),
        (869, '0869', 'Pokusan'),
        (870, '0870', 'Legios'),
        (871, '0871', 'Britzigel'),
        (872, '0872', 'Snomnom'),
        (873, '0873', 'Mottineva'),
        (874, '0874', 'Humanolith'),
        (875, '0875', 'Kubuin'),
        (876, '0876', 'Servol'),
        (877, '0877', 'Morpeko'),
        (878, '0878', 'Kupfanti'),
        (879, '0879', 'Patinaraja'),
        (880, '0880', 'Lectragon'),
        (881, '0881', 'Lecryodon'),
        (882, '0882', 'Pescragon'),
        (883, '0883', 'Pescryodon'),
        (884, '0884', 'Duraludon'),
        (885, '0885', 'Grolldra'),
        (886, '0886', 'Phandra'),
        (887, '0887', 'Katapuldra'),
        (888, '0888', 'Zacian'),
        (889, '0889', 'Zamazenta'),
        (890, '0890', 'Endynalos'),
        (891, '0891', 'Dakuma'),
        (892, '0892', 'Wulaosu'),
        (893, '0893', 'Zarude'),
        (894, '0894', 'Regieleki'),
        (895, '0895', 'Regidrago'),
        (896, '0896', 'Polaross'),
        (897, '0897', 'Phantoross'),
        (898, '0898', 'Coronospa'),
        (899, '0899', 'Damythir'),
        (900, '0900', 'Axantor'),
        (901, '0901', 'Ursaluna'),
        (902, '0902', 'Salmagnis'),
        (903, '0903', 'Snieboss'),
        (904, '0904', 'Myriador'),
        (905, '0905', 'Cupidos'),
        (906, '0906', 'Felori'),
        (907, '0907', 'Feliospa'),
        (908, '0908', 'Maskagato'),
        (909, '0909', 'Krokel'),
        (910, '0910', 'Lokroko'),
        (911, '0911', 'Skelokrok'),
        (912, '0912', 'Kwaks'),
        (913, '0913', 'Fuentente'),
        (914, '0914', 'Bailonda'),
        (915, '0915', 'Ferkuli'),
        (916, '0916', 'Fragrunz'),
        (917, '0917', 'Tarundel'),
        (918, '0918', 'Spinsidias'),
        (919, '0919', 'Micrick'),
        (920, '0920', 'Lextremo'),
        (921, '0921', 'Pamo'),
        (922, '0922', 'Pamamo'),
        (923, '0923', 'Pamomamo'),
        (924, '0924', 'Zwieps'),
        (925, '0925', 'Famieps'),
        (926, '0926', 'Hefel'),
        (927, '0927', 'Backel'),
        (928, '0928', 'Olini'),
        (929, '0929', 'Olivinio'),
        (930, '0930', 'Olithena'),
        (931, '0931', 'Krawalloro'),
        (932, '0932', 'Geosali'),
        (933, '0933', 'Sedisal'),
        (934, '0934', 'Saltigant'),
        (935, '0935', 'Knarbon'),
        (936, '0936', 'Crimanzo'),
        (937, '0937', 'Azugladis'),
        (938, '0938', 'Blipp'),
        (939, '0939', 'Wampitz'),
        (940, '0940', 'Voltrel'),
        (941, '0941', 'Voltrean'),
        (942, '0942', 'Mobtiff'),
        (943, '0943', 'Mastifioso'),
        (944, '0944', 'Sproxi'),
        (945, '0945', 'Affiti'),
        (946, '0946', 'Weherba'),
        (947, '0947', 'Horrerba'),
        (948, '0948', 'Tentagra'),
        (949, '0949', 'Tenterra'),
        (950, '0950', 'Klibbe'),
        (951, '0951', 'Chilingel'),
        (952, '0952', 'Halupenjo'),
        (953, '0953', 'Relluk'),
        (954, '0954', 'Skarabaks'),
        (955, '0955', 'Flattutu'),
        (956, '0956', 'Psiopatra'),
        (957, '0957', 'Forgita'),
        (958, '0958', 'Tafforgita'),
        (959, '0959', 'Granforgita'),
        (960, '0960', 'Schligda'),
        (961, '0961', 'Schligdri'),
        (962, '0962', 'Adebom'),
        (963, '0963', 'Normifin'),
        (964, '0964', 'Delfinator'),
        (965, '0965', 'Knattox'),
        (966, '0966', 'Knattatox'),
        (967, '0967', 'Mopex'),
        (968, '0968', 'Schlurm'),
        (969, '0969', 'Lumispross'),
        (970, '0970', 'Lumiflora'),
        (971, '0971', 'Gruff'),
        (972, '0972', 'Friedwuff'),
        (973, '0973', 'Flaminkno'),
        (974, '0974', 'Flaniwal'),
        (975, '0975', 'Kolowal'),
        (976, '0976', 'Agiluza'),
        (977, '0977', 'Heerashai'),
        (978, '0978', 'Nigiragi'),
        (979, '0979', 'Epitaff'),
        (980, '0980', 'Suelord'),
        (981, '0981', 'Farigiraf'),
        (982, '0982', 'Dummimisel'),
        (983, '0983', 'Gladimperio'),
        (984, '0984', 'Riesenzahn'),
        (985, '0985', 'Br\xFCllschweif'),
        (986, '0986', 'Wutpilz'),
        (987, '0987', 'Flatterhaar'),
        (988, '0988', 'Kriechfl\xFCgel'),
        (989, '0989', 'Sandfell'),
        (990, '0990', 'Eisenrad'),
        (991, '0991', 'Eisenb\xFCndel'),
        (992, '0992', 'Eisenhand'),
        (993, '0993', 'Eisenhals'),
        (994, '0994', 'Eisenfalter'),
        (995, '0995', 'Eisendorn'),
        (996, '0996', 'Frospino'),
        (997, '0997', 'Cryospino'),
        (998, '0998', 'Espinodon'),
        (999, '0999', 'Gierspenst'),
        (1000, '1000', 'Monetigo'),
        (1001, '1001', 'Chongjian'),
        (1002, '1002', 'Baojian'),
        (1003, '1003', 'Dinglu'),
        (1004, '1004', 'Yuyu'),
        (1005, '1005', 'Donnersichel'),
        (1006, '1006', 'Eisenkrieger'),
        (1007, '1007', 'Koraidon'),
        (1008, '1008', 'Miraidon'),
        (1009, '1009', 'Windewoge'),
        (1010, '1010', 'Eisenblatt'),
        (1011, '1011', 'Sirapfel'),
        (1012, '1012', 'Mortcha'),
        (1013, '1013', 'Fatalitcha'),
        (1014, '1014', 'Boninu'),
        (1015, '1015', 'Benesaru'),
        (1016, '1016', 'Beatori'),
        (1017, '1017', 'Ogerpon'),
        (1018, '1018', 'Briduradon'),
        (1019, '1019', 'Hydrapfel'),
        (1020, '1020', 'Keilflamme'),
        (1021, '1021', 'Furienblitz'),
        (1022, '1022', 'Eisenfels'),
        (1023, '1023', 'Eisenhaupt'),
        (1024, '1024', 'Terapagos'),
        (1025, '1025', 'Infamomo');
      `),j}async function de(){return await j.query("SELECT * FROM kartendex")}async function he(i,e,t){return await j.run(`UPDATE kartendex SET ${e} = ? WHERE dex = ?`,[t,i])}var ce,j,ee=A(()=>{X();ce=new O(Q)});document.addEventListener("DOMContentLoaded",()=>{(async()=>{let{initDatabase:i,getDaten:e,updateFeld:t}=await Promise.resolve().then(()=>(ee(),Y)),r=await i(),n=await e(),s=document.querySelector("#kartentabelle tbody");for(let a of n.values){let y=function(){let u=document.querySelectorAll("#kartentabelle tbody tr"),m=0;u.forEach(p=>{p.style.display!=="none"&&m++}),document.getElementById("eintragsAnzahl").textContent=`(${m})`};var w=y;let d=document.createElement("tr"),c=parseInt(a.dex);a.reverse||(a.reverse=""),a.holo||(a.holo=""),a.v||(a.v=""),a.vmax||(a.vmax=""),a.vstar||(a.vstar=""),a.ex||(a.ex=""),a.shiny||(a.shiny=""),a.fullart||(a.fullart=""),a.rare||(a.rare=""),a.amazing||(a.amazing=""),a.rainbow||(a.rainbow=""),a.gold||(a.gold=""),a.custom||(a.custom="");let b=`
        <td class="dexnr">${a.dex}</td>
        <td class="pokemon">
          <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${c}.png" alt="${a.name}"><br>
          <a href="https://www.pokewiki.de/${a.name}" target="_blank">${a.name}</a>
        </td>
        <td id="td_${a.dex}">
      `,g=["reverse","holo","v","vmax","vstar","ex","shiny","fullart","rare","amazing","rainbow","gold","custom"],f=!1;g.forEach(u=>{let m=a[u],p=m===""||m===null||m===void 0;p&&(f=!0),b+=`
          <div class="kartenContainer ${p?"versteckt":""}" id="container_${u}_${a.dex}">
            <input class="kartenAnzahl" type="number" min="0" max="999"
                  id="${u}_${a.dex}"
                  name="${u}_${a.dex}"
                  value="${m||""}"
                  oninput="toggleSaveButton('${u}', '${a.dex}')">

            <span id="labelOrButton_${u}_${a.dex}">
              <label for="${u}_${a.dex}">${u.toUpperCase()}</label>
            </span>

            <div class="checkmark" id="checkmark_${u}_${a.dex}">&#10003;</div>
            <br>
          </div>
        `}),f&&(b+=`
          <button id="neueKarteBtn_${a.dex}" onclick="zeigeAlleFelder('${a.dex}')">+ Neue Karte</button>
          <button id="abbrechenBtn_${a.dex}" onclick="versteckeLeereFelder('${a.dex}')" class="versteckt">Schlie\xDFen</button>
        `),b+="</td>",d.innerHTML=b,s.appendChild(d),y(),window.zeigeAlleFelder=function(u){var m,p;g.forEach(v=>{let E=document.getElementById(`container_${v}_${u}`);E&&E.classList.remove("versteckt")}),(m=document.getElementById(`neueKarteBtn_${u}`))==null||m.classList.add("versteckt"),(p=document.getElementById(`abbrechenBtn_${u}`))==null||p.classList.remove("versteckt")},window.versteckeLeereFelder=function(u){var m,p;g.forEach(v=>{let E=document.getElementById(`${v}_${u}`),P=document.getElementById(`container_${v}_${u}`);E&&P&&!E.value.trim()&&P.classList.add("versteckt")}),(m=document.getElementById(`neueKarteBtn_${u}`))==null||m.classList.remove("versteckt"),(p=document.getElementById(`abbrechenBtn_${u}`))==null||p.classList.add("versteckt")},window.toggleSaveButton=function(u,m){let p=`${u}_${m}`,v=`labelOrButton_${u}_${m}`,E=document.getElementById(p),P=document.getElementById(v);!E||!P||(E.value.trim()!==""?P.innerHTML=`
            <input class="saveButton" type="button"
                  onclick="saveUndReset('${u}', '${m}')"
                  value="Speichern!">
          `:P.innerHTML=`<label for="${p}">${u.toUpperCase()}</label>`)},window.saveUndReset=function(u,m){let p=`${u}_${m}`,v=document.getElementById(p),E=document.getElementById(`checkmark_${p}`);v&&save(v,E);let P=document.getElementById(`labelOrButton_${u}_${m}`);P&&(P.innerHTML=`<label for="${p}">${u.toUpperCase()}</label>`)}}function o(){let d=document.getElementById("search").value.toUpperCase(),b=document.getElementById("kartentabelle").getElementsByTagName("tr");for(let g=1;g<b.length;g++){b[g].style.display="none";let f=b[g].getElementsByTagName("td");for(let y=0;y<f.length;y++){let u=f[y];if(u&&u.innerHTML.toUpperCase().indexOf(d)>-1){b[g].style.display="";break}}}w()}window.search=o,window.showSaveButton=function(a){a.style.display="inline"},window.save=async function(a,d){let c=a.value,b=a.name.split("_"),g=b[0],f=b[1];(c===""||parseInt(c)===0)&&(c=null);try{await t(f,g,c),d.style.display="inline",setTimeout(()=>{d.style.display="none"},3e3)}catch(y){console.error("Fehler beim Speichern:",y),alert("Speichern fehlgeschlagen.")}};let l={holo:!1,fullart:!1,vfamily:!1,rares:!1};function h(a,d){let c=document.getElementById(`filter-${a}`),b=l[a];l[a]=!b,document.querySelectorAll("#kartentabelle tbody tr").forEach(f=>{let y=!1;d.forEach(u=>{var v;let m=f.querySelector(`input[id^="${u}_"]`),p=(v=m==null?void 0:m.value)==null?void 0:v.trim();p&&p!=="0"&&(y=!0)}),b?f.style.display=y?"none":"":f.style.display=y?"":"none"}),document.querySelectorAll("nav a").forEach(f=>{f.classList.remove("active-positive","active-negative")}),b?c.classList.add("active-negative"):c.classList.add("active-positive"),w()}document.getElementById("filter-holo").addEventListener("click",a=>{a.preventDefault(),h("holo",["reverse","holo"])}),document.getElementById("filter-fullart").addEventListener("click",a=>{a.preventDefault(),h("fullart",["fullart"])}),document.getElementById("filter-vfamily").addEventListener("click",a=>{a.preventDefault(),h("vfamily",["v","vmax","vstar","ex"])}),document.getElementById("filter-rares").addEventListener("click",a=>{a.preventDefault(),h("rares",["shiny","rare","amazing","rainbow","gold"])}),document.getElementById("filter-alle").addEventListener("click",a=>{a.preventDefault(),Object.keys(l).forEach(c=>l[c]=!1),document.querySelectorAll("#kartentabelle tbody tr").forEach(c=>c.style.display=""),document.querySelectorAll("nav a").forEach(c=>{c.classList.remove("active-positive","active-negative")}),w()})})()});})();
/*! Bundled license information:

@capacitor/core/dist/index.js:
  (*! Capacitor: https://capacitorjs.com/ - MIT License *)
*/
